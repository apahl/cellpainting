# Auto-generated by Pymod on 2017-08-02 at 08:39:59

{. compile: "pmgennim_ext_capi.c" .}

import strutils

import pymodpkg/miscutils
import pymodpkg/pyobject
import pymodpkg/private/membrain
import pymodpkg/pyarrayobject
import ../mod_profile_sim


# Auto-generated from exported function `profile_sim`:
#  /home/pahl/dev/python3/cellpainting/nim_ext/mod_profile_sim.nim(9, 0)
#
# Regardless of the return-type of the underlying Nim proc, we always
# return `ptr PyObject`, so we can return `nil` if an exception is raised.
proc exportpy_profile_sim(current: cstring, reference: cstring): ptr PyObject
        {. exportc, dynlib, cdecl .} =
  # http://nim-lang.org/manual.html#defer-statement
  defer: collectAllGarbage()

  try:
    initRegisteredPyObjects()
    let return_val = profile_sim($current, $reference)
    # Create a new PyObject value from the Nim value.
    return Py_BuildValue("d", return_val)
  except AssertionError:
    let msg = "$1\n$2" % [getCurrentExceptionMsg(),
        prettyPrintStackTrace(getStackTrace(getCurrentException()))]
    return raisePyAssertionError(msg)
  except IndexError:
    let msg = "$1\n$2" % [getCurrentExceptionMsg(),
        prettyPrintStackTrace(getStackTrace(getCurrentException()))]
    return raisePyIndexError(msg)
  except KeyError:
    let msg = "$1\n$2" % [getCurrentExceptionMsg(),
        prettyPrintStackTrace(getStackTrace(getCurrentException()))]
    return raisePyKeyError(msg)
  except ObjectConversionError:
    let msg = "$1\n$2" % [getCurrentExceptionMsg(),
        prettyPrintStackTrace(getStackTrace(getCurrentException()))]
    return raisePyTypeError(msg)
  except RangeError:
    let msg = "$1\n$2" % [getCurrentExceptionMsg(),
        prettyPrintStackTrace(getStackTrace(getCurrentException()))]
    return raisePyIndexError(msg)  # There's no RangeError in Python.
  except ValueError:
    let msg = "$1\n$2" % [getCurrentExceptionMsg(),
        prettyPrintStackTrace(getStackTrace(getCurrentException()))]
    return raisePyValueError(msg)
  except:  # catch any other Exception
    let msg = "$1\n$2" % [getCurrentExceptionMsg(),
        prettyPrintStackTrace(getStackTrace(getCurrentException()))]
    return raisePyRuntimeError(msg)
  finally:
    # Anything that needs to run after any exception has been handled.
    discard

  return getPyNone()

